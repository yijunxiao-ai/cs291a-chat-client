{"version":3,"sources":["userService.js","LoginForm.jsx","Compose.jsx","MessageList.jsx","UserList.jsx","helpers.js","App.jsx","serviceWorker.js","index.js"],"names":["userService","login","url","username","password","data","FormData","append","fetch","method","body","then","handleLoginResponse","message","content","token","headers","response","ok","json","status","alert","LoginForm","props","state","server","handleChange","bind","handleSubmit","event","this","setState","target","name","value","preventDefault","console","log","undefined","sessionStorage","user","startStream","Modal","show","Header","Title","Body","Form","onSubmit","Group","controlId","Label","Control","type","onChange","defaultValue","placeholder","Button","variant","React","Component","Compose","Container","Row","Col","disabled","MessageList","scrollToBottom","messagesEnd","scrollIntoView","behavior","style","className","history","map","key","float","clear","ref","el","UserList","Array","from","users","Badge","pill","helpers","formatJoin","formatDate","created","formatMessage","formatPart","formatServerStatus","timestamp","date","Date","toLocaleDateString","toLocaleTimeString","App","showLoginForm","online","eventSource","Set","handleDisconnect","handleJoin","handleMessage","handlePart","handleServerStatus","handleUsers","handleError","handleOpen","stream","EventSource","addEventListener","close","JSON","parse","add","concat","delete","readyState","sm","Navbar","bg","Brand","Collapse","Text","hidden","Dialog","size","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ef494f0d.chunk.js","sourcesContent":["export const userService = {\n    login,\n    message\n}\n\nfunction login(url, username, password) {\n    const data = new FormData();\n    data.append('username', username)\n    data.append('password', password)\n\n    return fetch(`${url}/login`, {\n        method: 'POST',\n        body: data,\n    })\n    .then(handleLoginResponse);\n}\n\n\nfunction handleLoginResponse(response) {\n    if (!response.ok) {\n        if (response.status === 403) {\n            alert(\"Invalid username or password\");\n        } else {\n            alert(response.status + \" failure to /login\");\n        }\n        return;\n    }\n    return response.json().then(data => {\n        return data.token;\n    });\n}\n\n\nfunction message(url, content, token) {\n    const data = new FormData();\n    data.append('message', content)\n\n    return fetch(`${url}/message`, {\n\tmethod: 'POST',\n\tbody: data,\n\theaders: {\n\t    'Authorization': `Bearer ${token}`\n\t}\n    });\n}\n","import React from \"react\";\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { userService } from './userService';\n\n\nclass LoginForm extends React.Component {\n    constructor(props) {\n    \tsuper(props);\n    \tthis.state = {\n    \t    server: \"http://0.0.0.0:3000\",\n    \t    username: \"\",\n    \t    password: \"\"\n    \t};\n\n\t    this.handleChange = this.handleChange.bind(this);\n\t    this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log(\"Try log in as \", this.state.username);\n\n    \tuserService.login(\n    \t    this.state.server,\n    \t    this.state.username,\n    \t    this.state.password\n    \t).then(token => {\n            console.log(\"Get token = \", token);\n            if (token !== undefined) {\n\t\tsessionStorage.url = this.state.server;\n\t\tsessionStorage.token = token;\n\t\tsessionStorage.user = this.state.username;\n\t\tthis.props.startStream();\n            }\n        });\n        this.setState({ password: \"\" });\n    }\n\n    render() {\n\treturn (\n\t    <Modal show={this.props.show}>\n\t      <Modal.Header>\n\t\t<Modal.Title>Login</Modal.Title>\n\t      </Modal.Header>\n\t      <Modal.Body>\n\t\t<Form onSubmit={this.handleSubmit}>\n\t\t  <Form.Group controlId=\"formGroupUrl\">\n\t\t    <Form.Label>Server URL</Form.Label>\n\t\t    <Form.Control\n\t\t      type=\"text\"\n\t\t      name=\"server\"\n\t\t      onChange={this.handleChange}\n\t\t      defaultValue={this.state.server}/>\n\t\t  </Form.Group>\n\n\t\t  <Form.Group controlId=\"formGroupUser\">\n\t\t    <Form.Label>Username</Form.Label>\n\t\t    <Form.Control\n\t\t      type=\"text\"\n\t\t      name=\"username\"\n\t\t      onChange={this.handleChange}\n\t\t      placeholder=\"Username\"/>\n\t\t  </Form.Group>\n\n\t\t  <Form.Group controlId=\"formGroupPass\">\n\t\t    <Form.Label>Password</Form.Label>\n\t\t    <Form.Control\n\t\t      type=\"password\"\n\t\t      name=\"password\"\n\t\t      onChange={this.handleChange}\n\t\t      placeholder=\"Password\"/>\n\t\t  </Form.Group>\n\t\t  <Button variant=\"primary\" type=\"submit\">\n\t\t    Submit\n\t\t  </Button>\n\t\t</Form>\n\t      </Modal.Body>\n\t    </Modal>\n\n\t);\n    }\n}\n\nexport default LoginForm;\n","import React from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport { userService } from  './userService';\n\n\n\nclass Compose extends React.Component {\n  \n  constructor(props){\n      super(props);\n      this.state = {\n\t  message: \"\"\n      };\n\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n      this.setState({ [event.target.name]: event.target.value });\n  }\n\n  handleSubmit(event) {\n      event.preventDefault();\n      userService.message(sessionStorage.url, this.state.message, sessionStorage.token);\n      console.log(\"Message sent\", this.state.message);\n      this.setState({ message: \"\" });\n  }\n\n  render() {\n      return (\n\t  <Container>\n\t      <Form onSubmit={this.handleSubmit}>\n\t\t<Form.Row>\n\t\t  <Col>\n\t\t    <Form.Control\n\t\t      type=\"text\"\n\t\t      name=\"message\"\n\t\t      disabled={this.props.disabled}\n\t\t      value={this.state.message}\n\t\t      onChange={this.handleChange}\n\t\t      placeholder=\"Type a message...\"\n\t\t      />\n\t\t  </Col>\n\t\t  <Button\n\t\t    variant=\"primary\"\n\t\t    type=\"submit\"\n\t\t    disabled={this.props.disabled}>\n\t\t    Send\n\t\t  </Button>\n\t\t</Form.Row>\n\t      </Form>\n\t  </Container>\n        );\n    }\n}\n\nexport default Compose;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\n\n\nclass MessageList extends React.Component {\n\n    scrollToBottom = () => {\n\tthis.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n    }\n\n    componentDidMount() {\n\tthis.scrollToBottom();\n    }\n\n    componentDidUpdate() {\n\tthis.scrollToBottom();\n    }\n    \n    render () {\n        return (\n\t    <Container style={{\n\t\t\t   'maxHeight': '60%',\n\t\t\t   'overflowY': 'auto',\n\t\t\t   'height': '600px',\n\t\t       }}>\n\t      <div className=\"messages\">\n\t\t<ul>\n\t\t  {\n\t\t      this.props.history.map((message, key) => {\n\t\t\treturn (\n\t\t\t    <li\n\t\t\t      key={key}\n\t\t\t      className={\n\t\t\t\t  message.event === 'Message' ? 'message' : 'status'\n\t\t\t      }>\n\t\t\t      <p className={\n\t\t\t\t     message.event === 'Message' ? 'bg-primary text-white' : 'none'\n\t\t\t\t }>\n\t\t\t\t{message.content}\n\t\t\t      </p>\n\t\t\t    </li>\n\t\t\t);\n\t\t    })\n\t\t  }\n\t\t</ul>\n\t      </div>\n\t\t<div\n\t    style={{ float: \"left\", clear: \"both\" }}\n\t    ref={(el) => { this.messagesEnd = el; }}></div>\n\t\t</Container>\n        );\n    }\n}\n\nexport default MessageList;\n","import React from \"react\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Container from \"react-bootstrap/Container\";\n\n\nclass UserList extends React.Component {\n\n  render () {\n    return (\n      <Container>\n        {\n\t    Array.from(this.props.users).map((user, key) => {\n\t\treturn (\n\t\t    <Badge\n\t\t      pill\n\t\t      variant=\"light\"\n\t\t      style={{ 'margin': '1em' }}\n\t\t      key={key}>\n\t\t      {user}\n\t\t    </Badge>\n\t\t);\n            })\n\t}\n      </Container>\n    );\n  }\n}\n\nexport default UserList;\n","export const helpers = {\n    formatJoin,\n    formatMessage,\n    formatPart,\n    formatServerStatus\n}\n\n\nfunction formatDate(timestamp) {\n    var date = new Date(timestamp * 1000);\n    return (\n        date.toLocaleDateString(\"en-US\") +\n\t    \" \" +\n            date.toLocaleTimeString(\"en-US\")\n    );\n}\n\n\nfunction formatJoin(data) {\n    return {\n\t'event': 'Join',\n\t'content': formatDate(data.created) + \" JOIN: \" + data.user\n    };\n}\n\nfunction formatMessage(data) {\n    return {\n\t'event': 'Message',\n\t'content': formatDate(data.created) + \" (\" + data.user + \") \" + data.message\n    };\n}\n\nfunction formatPart(data) {\n    return {\n\t'event': 'Part',\n\t'content': formatDate(data.created) + \" PART: \" + data.user\n    };\n}\n\nfunction formatServerStatus(data) {\n    return {\n\t'event': 'ServerStatus',\n\t'content': formatDate(data.created) + \" STATUS: \" + data.status\n    };\n}\n","import React from 'react';\nimport Badge from \"react-bootstrap/Badge\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Row from \"react-bootstrap/Row\";\nimport './App.css';\nimport LoginForm from \"./LoginForm\";\nimport Compose from \"./Compose\";\nimport MessageList from \"./MessageList\";\nimport UserList from \"./UserList\";\nimport { helpers } from './helpers';\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\t    showLoginForm: true,\n\t    online: false,\n\t    eventSource: null,\n\t    users: new Set(),\n\t    history: []\n        };\n\n        this.startStream = this.startStream.bind(this);\n        this.handleDisconnect = this.handleDisconnect.bind(this);\n  \tthis.handleJoin = this.handleJoin.bind(this);\n  \tthis.handleMessage = this.handleMessage.bind(this);\n  \tthis.handlePart = this.handlePart.bind(this);\n  \tthis.handleServerStatus = this.handleServerStatus.bind(this);\n  \tthis.handleUsers = this.handleUsers.bind(this);\n\tthis.handleError = this.handleError.bind(this);\n\tthis.handleOpen = this.handleOpen.bind(this);\n    }\n\n    startStream() {\n\tthis.setState({\n\t    showLoginForm: false,\n\t});\n        var stream = new EventSource(\n            sessionStorage.url + '/stream/' + sessionStorage.token\n        );\n        console.log('NEW stream started with ', sessionStorage.token);\n\n        stream.addEventListener(\"Disconnect\", this.handleDisconnect, false);\n  \tstream.addEventListener(\"Join\", this.handleJoin, false);\n  \tstream.addEventListener(\"Message\", this.handleMessage, false);\n        stream.addEventListener(\"Part\", this.handlePart, false);\n  \tstream.addEventListener(\"ServerStatus\", this.handleServerStatus, false);\n  \tstream.addEventListener(\"Users\", this.handleUsers, false);\n  \tstream.addEventListener(\"error\", this.handleError, false);\n\tstream.addEventListener(\"open\", this.handleOpen, false);\n  \tthis.setState({ eventSource: stream });\n    }\n\n    handleDisconnect(event) {\n        delete sessionStorage.token;\n\tdelete sessionStorage.url;\n\tdelete sessionStorage.user;\n        this.state.eventSource.close();\n        this.setState({\n\t    history: [],\n\t    online: false,\n\t    showLoginForm: true\n\t});\n        console.log('sessionStorage: ', sessionStorage.token);\n    }\n\n    handleJoin(event) {\n        var data = JSON.parse(event.data);\n        var users = new Set(this.state.users);\n        users.add(data.user);\n        console.log(data);\n        this.setState({\n            users: users,\n            history: this.state.history.concat([helpers.formatJoin(data)])\n        });\n    }\n\n    handleMessage(event) {\n\tvar data = JSON.parse(event.data);\n\tconsole.log(data);\n\tthis.setState({ history: this.state.history.concat([helpers.formatMessage(data)]) });\n    }\n\n    handlePart(event) {\n\tvar data = JSON.parse(event.data);\n\tvar users = new Set(this.state.users);\n\tusers.delete(data.user);\n  \tconsole.log(data);\n  \tthis.setState({\n\t    users: users,\n\t    history: this.state.history.concat([helpers.formatPart(data)])\n        });\n    }\n\n    handleServerStatus(event) {\n        var data = JSON.parse(event.data);\n        console.log(data);\n        this.setState({ history: this.state.history.concat([helpers.formatServerStatus(data)]) });\n    }\n\n    handleUsers(event) {\n\tconsole.log(event);\n\tvar data = JSON.parse(event.data);\n\tthis.setState({ users: new Set(data.users) });\n    }\n\n    handleError(event) {\n\tthis.setState({ online: false });\n        if (event.target.readyState === 2) {\n            delete sessionStorage.token;\n\t    delete sessionStorage.url;\n\t    delete sessionStorage.user;\n            this.setState({ history: [] });\n        } else {\n            console.log(\"Disconnected, retrying\");\n        }\n    }\n\n    handleOpen(event) {\n\tthis.setState({ online: true });\n    }\n\n    render() {\n\treturn (\n\t    <Container className=\"App\">\n\t      <Row>\n\t\t<Col sm={12}>\n\t\t  <Navbar bg=\"light\">\n\t\t    <Navbar.Brand>CS291A Chat Room</Navbar.Brand>\n\t\t    <Badge variant={this.state.online ? \"success\" : \"danger\"}>\n\t\t      {this.state.online ? \"Online\" : \"Offline\"}\n\t\t    </Badge>\n\t\t    <Navbar.Collapse className=\"justify-content-end\">\n\t\t      <Navbar.Text hidden={!this.state.online}>\n\t\t\tLogged in as: <span className=\"font-weight-bold\">{sessionStorage.user}</span>\n\t\t      </Navbar.Text>\n\t\t    </Navbar.Collapse>\n\t\t  </Navbar>\n\t\t</Col>\n\t      </Row>\n\t      <Row>\n\t\t<Col sm={12}>\n\t\t  <Modal.Dialog size=\"lg\" className=\"bg-light\">\n\t\t    <Modal.Header>\n\t\t      <Container>\n\t\t\t<Row>\n\t\t\t  Online Users\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t  <UserList\n\t\t\t    users={this.state.users}/>\n\t\t\t</Row>\n\t\t      </Container>\n\t\t    </Modal.Header>\n\t\t    <Modal.Body>\n\t\t      <MessageList history={this.state.history}/>\n\t\t    </Modal.Body>\n\t\t    <Modal.Footer>\n\t\t      <Compose disabled={!this.state.online}/>\n\t\t    </Modal.Footer>\n\t\t  </Modal.Dialog>\n\t\t</Col>\n\t      </Row>\n\t      <LoginForm\n\t\tshow={this.state.showLoginForm}\n\t\tstartStream={this.startStream}/>\n\t    </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}